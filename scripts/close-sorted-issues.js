#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –ü–∞–ø–∫–∏ —Å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ issues
const ACCEPTED_DIR = path.join(__dirname, 'accepted');
const BLOCKED_DIR = path.join(__dirname, 'blocked');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
function runCommand(command, errorMessage) {
  try {
    return execSync(command, { encoding: 'utf8', stdio: 'pipe' });
  } catch (error) {
    console.error(`‚ùå ${errorMessage}`);
    console.error(error.message);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ issue –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
function getIssueNumber(filename) {
  const match = filename.match(/issue-(\d+)\.json$/);
  return match ? match[1] : null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è issue
function closeIssue(issueNumber, reason) {
  const reasonFlag = reason === 'completed' ? '--reason completed' : '--reason \"not planned\"';
  
  try {
    console.log(`  –ó–∞–∫—Ä—ã–≤–∞—é issue #${issueNumber} –∫–∞–∫ ${reason}...`);
    execSync(`gh issue close ${issueNumber} ${reasonFlag}`, { 
      encoding: 'utf8', 
      stdio: 'pipe' 
    });
    console.log(`  ‚úÖ Issue #${issueNumber} –∑–∞–∫—Ä—ã—Ç`);
    return true;
  } catch (error) {
    console.error(`  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å issue #${issueNumber}: ${error.message}`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ issues –≤ –ø–∞–ø–∫–µ
function processIssuesInFolder(folderPath, reason) {
  if (!fs.existsSync(folderPath)) {
    console.log(`üìÅ –ü–∞–ø–∫–∞ ${path.basename(folderPath)} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é...`);
    return { processed: 0, failed: 0 };
  }

  const files = fs.readdirSync(folderPath).filter(f => f.endsWith('.json'));
  
  if (files.length === 0) {
    console.log(`üìÅ –ü–∞–ø–∫–∞ ${path.basename(folderPath)} –ø—É—Å—Ç–∞`);
    return { processed: 0, failed: 0 };
  }

  console.log(`\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É ${path.basename(folderPath)} (${files.length} issues):`);
  
  let processed = 0;
  let failed = 0;

  for (const file of files) {
    const issueNumber = getIssueNumber(file);
    if (issueNumber) {
      if (closeIssue(issueNumber, reason)) {
        processed++;
      } else {
        failed++;
      }
    } else {
      console.log(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é —Ñ–∞–π–ª ${file} - –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä issue`);
    }
  }

  return { processed, failed };
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö issues...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
  try {
    runCommand('git rev-parse --git-dir', '–ù–µ –Ω–∞–π–¥–µ–Ω git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π');
  } catch (error) {
    console.error('‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –∏–∑ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è');
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ gh —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  try {
    runCommand('gh auth status', 'GitHub CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  } catch (error) {
    console.error('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GitHub CLI: https://cli.github.com/');
    console.error('‚ùå –ó–∞—Ç–µ–º –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: gh auth login');
    process.exit(1);
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
  let repoInfo;
  try {
    const repoJson = runCommand('gh repo view --json nameWithOwner', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏');
    repoInfo = JSON.parse(repoJson);
    console.log(`üìç –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${repoInfo.nameWithOwner}`);
  } catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π');
    process.exit(1);
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º accepted issues
  const acceptedStats = processIssuesInFolder(ACCEPTED_DIR, 'completed');
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º blocked issues
  const blockedStats = processIssuesInFolder(BLOCKED_DIR, 'not planned');

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`   –ó–∞–∫—Ä—ã—Ç–æ –∫–∞–∫ completed: ${acceptedStats.processed}`);
  console.log(`   –ó–∞–∫—Ä—ã—Ç–æ –∫–∞–∫ not planned: ${blockedStats.processed}`);
  
  const totalFailed = acceptedStats.failed + blockedStats.failed;
  if (totalFailed > 0) {
    console.log(`   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å: ${totalFailed}`);
  }

  console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(error => {
  console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});