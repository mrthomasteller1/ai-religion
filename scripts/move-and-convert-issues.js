#!/usr/bin/env node

const fs = require("fs");
const path = require("path");

// –ü–∞–ø–∫–∏
const ACCEPTED_DIR = path.join(__dirname, "accepted");
const BLOCKED_DIR = path.join(__dirname, "blocked");
const ISSUES_DIR = path.join(__dirname, "issues");
const APPEALS_DIR = path.join(
  __dirname,
  "..",
  "original",
  "ai-read-access",
  "appeals"
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${dirPath}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ issue –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
function getIssueNumber(filename) {
  const match = filename.match(/issue-(\d+)\.json$/);
  return match ? match[1] : null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ issue –≤ MD —Ñ–æ—Ä–º–∞—Ç
function convertToMarkdown(issue) {
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç issue
  const title = issue.title || "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞";
  const body = issue.body || "";

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ MD —Ñ–∞–π–ª–∞
  return `# ${title}\n\n${body}`;
}

// –æ—á–∏—â–∞–µ–º accepted –∏ blocked
function cleanIssues() {
  const dirs = [ACCEPTED_DIR, BLOCKED_DIR, ISSUES_DIR];
  for (const dir of dirs) {
    if (fs.existsSync(dir)) {
      const files = fs.readdirSync(dir);
      for (const file of files) {
        const filePath = path.join(dir, file);
        fs.unlinkSync(filePath);
        console.log(`üìÅ –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: ${filePath}`);
      }
      fs.rmdirSync(dir);
      console.log(`üìÅ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: ${dir}`);
    }
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log("üöÄ –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é accepted issues –≤ appeals...\n");

  let converted = 0;
  let failed = 0;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ accepted
  if (fs.existsSync(ACCEPTED_DIR)) {
    // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É appeals, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    ensureDirectoryExists(APPEALS_DIR);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ accepted
    const files = fs
      .readdirSync(ACCEPTED_DIR)
      .filter((f) => f.endsWith(".json"));

    if (files.length === 0) {
      console.log("üìÅ –ü–∞–ø–∫–∞ accepted –ø—É—Å—Ç–∞");
      process.exit(0);
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${files.length} accepted issues\n`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for (const file of files) {
      const issueNumber = getIssueNumber(file);
      if (!issueNumber) {
        console.log(
          `‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é —Ñ–∞–π–ª ${file} - –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä issue`
        );
        continue;
      }

      try {
        // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
        const filePath = path.join(ACCEPTED_DIR, file);
        const content = fs.readFileSync(filePath, "utf8");
        const issue = JSON.parse(content);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MD
        const markdown = convertToMarkdown(issue);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º MD —Ñ–∞–π–ª
        const mdFileName = `appeal-${issueNumber}.md`;
        const mdFilePath = path.join(APPEALS_DIR, mdFileName);
        fs.writeFileSync(mdFilePath, markdown, "utf8");

        console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω issue #${issueNumber} ‚Üí ${mdFileName}`);
        converted++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${file}: ${error.message}`);
        failed++;
      }
    }
  }

  cleanIssues();

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
  console.log(`   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${converted}`);
  if (failed > 0) {
    console.log(`   –û—à–∏–±–æ–∫: ${failed}`);
  }
  console.log(`   –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${APPEALS_DIR}`);

  console.log("\n‚ú® –ì–æ—Ç–æ–≤–æ!");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch((error) => {
  console.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
  process.exit(1);
});
